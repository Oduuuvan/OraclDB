-- Generated by Oracle SQL Developer Data Modeler 21.2.0.183.1957
--   at:        2021-10-14 13:38:08 MSK
--   site:      Oracle Database 12c
--   type:      Oracle Database 12c



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE kmtm_teacher_subject (
    teacher_subject_id NUMBER NOT NULL,
    teacher_id         NUMBER NOT NULL,
    school_subject_id  NUMBER NOT NULL
);

COMMENT ON COLUMN kmtm_teacher_subject.teacher_subject_id IS
    'суррогатный первичный ключ';

COMMENT ON COLUMN kmtm_teacher_subject.teacher_id IS
    'внешний ключ для связи с учителем';

COMMENT ON COLUMN kmtm_teacher_subject.school_subject_id IS
    'внешний ключ для связи с предметом';

CREATE INDEX i_mtm_teacher_id ON
    kmtm_teacher_subject (
        teacher_id
    ASC );

CREATE INDEX i_mtm_subject_id ON
    kmtm_teacher_subject (
        school_subject_id
    ASC );

ALTER TABLE kmtm_teacher_subject ADD CONSTRAINT pk_teacher_subject PRIMARY KEY ( teacher_subject_id );

CREATE TABLE knet_session (
    session_id   NUMBER NOT NULL,
    session_data CLOB NOT NULL,
    expire_time  DATE
);

COMMENT ON COLUMN knet_session.session_id IS
    'естественный первичный ключ (ключ сессии)';

COMMENT ON COLUMN knet_session.session_data IS
    'данные сессии';

COMMENT ON COLUMN knet_session.expire_time IS
    'дата окончания действия сессии';

ALTER TABLE knet_session ADD CONSTRAINT pk_session PRIMARY KEY ( session_id );

CREATE TABLE knet_users (
    users_id     NUMBER NOT NULL,
    is_superuser NUMBER NOT NULL,
    surname      VARCHAR2(25) NOT NULL,
    name         VARCHAR2(25) NOT NULL,
    patronymic   VARCHAR2(25),
    mail         VARCHAR2(45),
    username     VARCHAR2(20) NOT NULL,
    password     VARCHAR2(45) NOT NULL,
    is_active    NUMBER NOT NULL,
    last_login   DATE NOT NULL
);

COMMENT ON COLUMN knet_users.users_id IS
    'суррогатный первичный ключ';

COMMENT ON COLUMN knet_users.is_superuser IS
    'обладает ли пользователь правами администратора';

COMMENT ON COLUMN knet_users.surname IS
    'фамилия';

COMMENT ON COLUMN knet_users.name IS
    'имя';

COMMENT ON COLUMN knet_users.patronymic IS
    'отчество';

COMMENT ON COLUMN knet_users.mail IS
    'электронная почта пользователя';

COMMENT ON COLUMN knet_users.username IS
    'логин пользователя (никнейм)';

COMMENT ON COLUMN knet_users.password IS
    'пароль ';

COMMENT ON COLUMN knet_users.is_active IS
    'активен пользователь или нет';

COMMENT ON COLUMN knet_users.last_login IS
    'дата и время последнего входа';

ALTER TABLE knet_users ADD CONSTRAINT pk_users PRIMARY KEY ( users_id );

CREATE TABLE ksch_cabinet (
    cabinet_id     NUMBER NOT NULL,
    cabinet_number NUMBER(5) NOT NULL,
    campus         VARCHAR2(20),
    school_id      NUMBER NOT NULL
);

COMMENT ON COLUMN ksch_cabinet.cabinet_id IS
    'сурогатный первичный ключ';

COMMENT ON COLUMN ksch_cabinet.cabinet_number IS
    'номер кабинета';

COMMENT ON COLUMN ksch_cabinet.campus IS
    'учебный корпус (может быть null, если в школе нет такого разделения)';

COMMENT ON COLUMN ksch_cabinet.school_id IS
    'внешний ключ для связи со школой';

CREATE INDEX i_cabinet_school_id ON
    ksch_cabinet (
        school_id
    ASC );

ALTER TABLE ksch_cabinet ADD CONSTRAINT pk_cabinet PRIMARY KEY ( cabinet_id );

CREATE TABLE ksch_class (
    class_id      NUMBER NOT NULL,
    start_year    DATE NOT NULL,
    end_year      DATE NOT NULL,
    name          VARCHAR2(1) NOT NULL,
    year_of_study NUMBER(2),
    teacher_id    NUMBER NOT NULL,
    school_id     NUMBER NOT NULL
);

COMMENT ON COLUMN ksch_class.class_id IS
    'суррогатный первичный ключ';

COMMENT ON COLUMN ksch_class.start_year IS
    'год создания класса';

COMMENT ON COLUMN ksch_class.end_year IS
    'предполагаемы год выпуска';

COMMENT ON COLUMN ksch_class.name IS
    'буква класса';

COMMENT ON COLUMN ksch_class.year_of_study IS
    'год обучения';

COMMENT ON COLUMN ksch_class.teacher_id IS
    'классный руководитель, представленный внешним ключом на таблицу teacher ';

COMMENT ON COLUMN ksch_class.school_id IS
    'внешний ключ для связи со школой';

CREATE INDEX i_class_teacher_id ON
    ksch_class (
        teacher_id
    ASC );

CREATE INDEX i_class_school_id ON
    ksch_class (
        school_id
    ASC );

ALTER TABLE ksch_class ADD CONSTRAINT pk_class PRIMARY KEY ( class_id );

CREATE TABLE ksch_journal_entry (
    journal_entry_id NUMBER NOT NULL,
    mark_for_lesson  NUMBER(2),
    mark_for_hw      NUMBER(2),
    attendance       NUMBER,
    student_id       NUMBER NOT NULL,
    lesson_id        NUMBER NOT NULL
);

COMMENT ON COLUMN ksch_journal_entry.journal_entry_id IS
    'суррогатный первичный ключ';

COMMENT ON COLUMN ksch_journal_entry.mark_for_lesson IS
    'оценка за урок';

COMMENT ON COLUMN ksch_journal_entry.mark_for_hw IS
    'оценка за домашнюю работу';

COMMENT ON COLUMN ksch_journal_entry.attendance IS
    'присутствие на уроке';

COMMENT ON COLUMN ksch_journal_entry.student_id IS
    'внешний ключ для связи с учеником';

COMMENT ON COLUMN ksch_journal_entry.lesson_id IS
    'внешний ключ для связи с уроком';

CREATE INDEX i_journal_student_id ON
    ksch_journal_entry (
        student_id
    ASC );

CREATE INDEX i_journal_lesson_id ON
    ksch_journal_entry (
        lesson_id
    ASC );

ALTER TABLE ksch_journal_entry ADD CONSTRAINT pk_journal_entry PRIMARY KEY ( journal_entry_id );

CREATE TABLE ksch_lesson (
    lesson_id         NUMBER NOT NULL,
    homework          CLOB,
    class_id          NUMBER NOT NULL,
    teacher_id        NUMBER NOT NULL,
    cabinet_id        NUMBER NOT NULL,
    school_subject_id NUMBER NOT NULL,
    lesson_time_id    NUMBER NOT NULL
);

COMMENT ON COLUMN ksch_lesson.lesson_id IS
    'суррогатный первичный ключ';

COMMENT ON COLUMN ksch_lesson.homework IS
    'домашняя работа заданная на уроке';

COMMENT ON COLUMN ksch_lesson.class_id IS
    'класс, который должен явится на урок (внешний ключ)';

COMMENT ON COLUMN ksch_lesson.teacher_id IS
    'преподаватель который будет вести урок (внешний ключ)';

COMMENT ON COLUMN ksch_lesson.cabinet_id IS
    'кабинет, где будет проходить урок (внешний ключ)';

COMMENT ON COLUMN ksch_lesson.school_subject_id IS
    'предмет урока (внешний ключ)';

COMMENT ON COLUMN ksch_lesson.lesson_time_id IS
    'время урока (внешний ключ)';

CREATE INDEX i_lesson_class_id ON
    ksch_lesson (
        class_id
    ASC );

CREATE INDEX i_lesson_teacher_id ON
    ksch_lesson (
        teacher_id
    ASC );

CREATE INDEX i_lesson_cabinet_id ON
    ksch_lesson (
        cabinet_id
    ASC );

CREATE INDEX i_lesson_subject_id ON
    ksch_lesson (
        school_subject_id
    ASC );

CREATE INDEX i_lesson_time_id ON
    ksch_lesson (
        lesson_time_id
    ASC );

ALTER TABLE ksch_lesson ADD CONSTRAINT pk_lesson PRIMARY KEY ( lesson_id );

CREATE TABLE ksch_lesson_time (
    lesson_time_id NUMBER NOT NULL,
    start_time     DATE,
    end_time       DATE
);

COMMENT ON COLUMN ksch_lesson_time.lesson_time_id IS
    'суррогатный первичный ключ (номер урока)';

COMMENT ON COLUMN ksch_lesson_time.start_time IS
    'начало урока';

COMMENT ON COLUMN ksch_lesson_time.end_time IS
    'конец урока';

ALTER TABLE ksch_lesson_time ADD CONSTRAINT pk_lesson_time PRIMARY KEY ( lesson_time_id );

CREATE TABLE ksch_school (
    school_id   NUMBER NOT NULL,
    address     VARCHAR2(45) NOT NULL,
    school_name VARCHAR2(45) NOT NULL,
    mail        VARCHAR2(45),
    phone       VARCHAR2(12)
);

COMMENT ON COLUMN ksch_school.school_id IS
    'сурогатный первичный ключ';

COMMENT ON COLUMN ksch_school.address IS
    'адресс школы';

COMMENT ON COLUMN ksch_school.school_name IS
    'название школы';

COMMENT ON COLUMN ksch_school.mail IS
    'почта школы';

COMMENT ON COLUMN ksch_school.phone IS
    'телефон школы';

ALTER TABLE ksch_school ADD CONSTRAINT pk_school PRIMARY KEY ( school_id );

CREATE TABLE ksch_school_subject (
    school_subject_id NUMBER NOT NULL,
    name              VARCHAR2(20)
);

COMMENT ON COLUMN ksch_school_subject.school_subject_id IS
    'суррогатный первичный ключ';

COMMENT ON COLUMN ksch_school_subject.name IS
    'название предмета';

ALTER TABLE ksch_school_subject ADD CONSTRAINT pk_school_subject PRIMARY KEY ( school_subject_id );

CREATE TABLE ksch_student (
    student_id             NUMBER NOT NULL,
    parent_mail            VARCHAR2(45),
    additional_information CLOB,
    users_id               NUMBER NOT NULL,
    class_id               NUMBER NOT NULL
);

COMMENT ON COLUMN ksch_student.student_id IS
    'суррогатный первичный ключ';

COMMENT ON COLUMN ksch_student.parent_mail IS
    'почта для связи с родителями';

COMMENT ON COLUMN ksch_student.additional_information IS
    'всякого рода дополнительная информация, заполняемая учеником по желанию';

COMMENT ON COLUMN ksch_student.users_id IS
    'внешний ключ для связи с пользователем';

COMMENT ON COLUMN ksch_student.class_id IS
    'внешний ключ для связи с классом ';

CREATE INDEX i_student_class_id ON
    ksch_student (
        class_id
    ASC );

CREATE INDEX i_student_users_id ON
    ksch_student (
        users_id
    ASC );

ALTER TABLE ksch_student ADD CONSTRAINT pk_student PRIMARY KEY ( student_id );

CREATE TABLE ksch_teacher (
    teacher_id      NUMBER NOT NULL,
    work_experience VARCHAR2(45),
    education       VARCHAR2(45),
    users_id        NUMBER NOT NULL,
    school_id       NUMBER NOT NULL
);

COMMENT ON COLUMN ksch_teacher.teacher_id IS
    'суррогатный первичный ключ';

COMMENT ON COLUMN ksch_teacher.work_experience IS
    'стаж работы';

COMMENT ON COLUMN ksch_teacher.education IS
    'образование преподавателя';

COMMENT ON COLUMN ksch_teacher.users_id IS
    'внешний ключ для связи с пользователем';

COMMENT ON COLUMN ksch_teacher.school_id IS
    'внешний ключ для связи со школой';

CREATE INDEX i_teacher_users_id ON
    ksch_teacher (
        users_id
    ASC );

CREATE INDEX i_teacher_school_id ON
    ksch_teacher (
        school_id
    ASC );

ALTER TABLE ksch_teacher ADD CONSTRAINT pk_teacher PRIMARY KEY ( teacher_id );

ALTER TABLE ksch_cabinet
    ADD CONSTRAINT fk_cabinet_school FOREIGN KEY ( school_id )
        REFERENCES ksch_school ( school_id );

ALTER TABLE ksch_class
    ADD CONSTRAINT fk_class_school FOREIGN KEY ( school_id )
        REFERENCES ksch_school ( school_id );

ALTER TABLE ksch_class
    ADD CONSTRAINT fk_class_teacher FOREIGN KEY ( teacher_id )
        REFERENCES ksch_teacher ( teacher_id );

ALTER TABLE ksch_journal_entry
    ADD CONSTRAINT fk_journal_lesson FOREIGN KEY ( lesson_id )
        REFERENCES ksch_lesson ( lesson_id );

ALTER TABLE ksch_journal_entry
    ADD CONSTRAINT fk_journal_student FOREIGN KEY ( student_id )
        REFERENCES ksch_student ( student_id );

ALTER TABLE ksch_lesson
    ADD CONSTRAINT fk_lesson_cabinet FOREIGN KEY ( cabinet_id )
        REFERENCES ksch_cabinet ( cabinet_id );

ALTER TABLE ksch_lesson
    ADD CONSTRAINT fk_lesson_class FOREIGN KEY ( class_id )
        REFERENCES ksch_class ( class_id );

ALTER TABLE ksch_lesson
    ADD CONSTRAINT fk_lesson_subject FOREIGN KEY ( school_subject_id )
        REFERENCES ksch_school_subject ( school_subject_id );

ALTER TABLE ksch_lesson
    ADD CONSTRAINT fk_lesson_teacher FOREIGN KEY ( teacher_id )
        REFERENCES ksch_teacher ( teacher_id );

ALTER TABLE ksch_lesson
    ADD CONSTRAINT fk_lesson_time FOREIGN KEY ( lesson_time_id )
        REFERENCES ksch_lesson_time ( lesson_time_id );

ALTER TABLE kmtm_teacher_subject
    ADD CONSTRAINT fk_mtm_subject FOREIGN KEY ( school_subject_id )
        REFERENCES ksch_school_subject ( school_subject_id );

ALTER TABLE kmtm_teacher_subject
    ADD CONSTRAINT fk_mtm_teacher FOREIGN KEY ( teacher_id )
        REFERENCES ksch_teacher ( teacher_id );

ALTER TABLE ksch_student
    ADD CONSTRAINT fk_student_class FOREIGN KEY ( class_id )
        REFERENCES ksch_class ( class_id );

ALTER TABLE ksch_student
    ADD CONSTRAINT fk_student_users FOREIGN KEY ( users_id )
        REFERENCES knet_users ( users_id );

ALTER TABLE ksch_teacher
    ADD CONSTRAINT fk_teacher_school FOREIGN KEY ( school_id )
        REFERENCES ksch_school ( school_id );

ALTER TABLE ksch_teacher
    ADD CONSTRAINT fk_teacher_users FOREIGN KEY ( users_id )
        REFERENCES knet_users ( users_id );



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            12
-- CREATE INDEX                            16
-- ALTER TABLE                             28
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           0
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- TSDP POLICY                              0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
